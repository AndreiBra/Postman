{
	"info": {
		"_postman_id": "e6cd72b0-c261-40c8-9f77-0e95352e15da",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19815096"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2 Copy",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrei",
							"type": "text"
						},
						{
							"key": "age",
							"value": "47",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1499",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let responseData = pm.response.json();  \r",
							"console.log('response data:', responseData)\r",
							"// 4. Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject();\r",
							"console.log('request data:', requestData)\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(responseData.age).to.eql(requestData.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Test salary\", function () {\r",
							"    pm.expect(responseData.salary).to.eql(Number(requestData.salary));\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log('Family: ', responseData.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Test dog has name\", function () {\r",
							"    pm.expect(responseData.family.pets.dog).to.haveOwnProperty('name')\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Test dog has age\", function () {\r",
							"    pm.expect(responseData.family.pets.dog).to.haveOwnProperty('age')\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Test dog's name is Luky\", function () {\r",
							"    pm.expect(responseData.family.pets.dog.name).to.eql('Luky')\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Test dog have age 4\", function () {\r",
							"    pm.expect(responseData.family.pets.dog.age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrei",
							"type": "text"
						},
						{
							"key": "age",
							"value": "47",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1499",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andrei&age=47&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrei"
						},
						{
							"key": "age",
							"value": "47"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let responseData = pm.response.json();  \r",
							"console.log('response data:', responseData)\r",
							"// 4. Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject();\r",
							"console.log('request data:', requestData)\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Test age\", function () {\r",
							"    pm.expect(responseData.age).to.eql(Number(requestData.age));\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestData.salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(responseData.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responseData.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseData.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test salary zero element\", function () {\r",
							"    pm.expect(responseData.salary[0]).to.eql(Number(requestData.salary));\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test salary first element\", function () {\r",
							"    pm.expect(Number(responseData.salary[1])).to.eql(Number(requestData.salary*2));\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Test salary second element\", function () {\r",
							"    pm.expect(Number(responseData.salary[2])).to.eql(Number(requestData.salary*3));\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', responseData.name)\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set('age', responseData.age)\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', responseData.salary[0])\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < 3; i=i+1) {\r",
							"    console.log('My salary:', responseData.salary[0+i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrei",
							"type": "text"
						},
						{
							"key": "age",
							"value": "47",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1499",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andrei&age=47&salary=3333",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrei"
						},
						{
							"key": "age",
							"value": "47"
						},
						{
							"key": "salary",
							"value": "3333"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_77 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let responseData = pm.response.json();  \r",
							"console.log('response data:', responseData)\r",
							"// 7. Спарсить request.\r",
							"let requestData = request.data;  \r",
							"console.log('request data:', requestData)\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Test salary start_qa_salary\", function () {\r",
							"    pm.expect(responseData).to.haveOwnProperty('start_qa_salary')\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Test salary qa_salary_after_6_months\", function () {\r",
							"    pm.expect(responseData).to.haveOwnProperty('qa_salary_after_6_months')\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Test salary qa_salary_after_12_months\", function () {\r",
							"    pm.expect(responseData).to.haveOwnProperty('qa_salary_after_12_months')\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Test salary have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(responseData).to.haveOwnProperty('qa_salary_after_1.5_year')\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Test salary qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(responseData).to.haveOwnProperty('qa_salary_after_3.5_years')\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Test person\", function () {\r",
							"    pm.expect(responseData).to.haveOwnProperty('person')\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test start_qa_salary\", function () {\r",
							"    pm.expect(responseData.start_qa_salary).to.eql(Number(requestData.salary));\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test qa_salary_after_6_months\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(Number(requestData.salary*2));\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(Number(requestData.salary*2.7));\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Test qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(responseData['qa_salary_after_1.5_year']).to.eql(Number(requestData.salary*3.3));\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Test qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(responseData['qa_salary_after_3.5_years']).to.eql(Number(requestData.salary*3.8));\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test u_name\", function () {\r",
							"    pm.expect(responseData.person.u_name[1]).to.eql(Number(requestData.salary));\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Test u_age\", function () {\r",
							"    pm.expect(responseData.person.u_age).to.eql(Number(requestData.age));\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Test u_salary_5_years\", function () {\r",
							"    pm.expect(responseData.person.u_salary_5_years).to.eql(Number(requestData.salary*4.2));\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in responseData.person) {  \r",
							"console.log(i +': ' + responseData.person[i]);  \r",
							"\t}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}